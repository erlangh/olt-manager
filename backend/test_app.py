"""
Simple test script to verify the FastAPI application structure.
This script tests the application without requiring database or external dependencies.
"""

import sys
import os
from pathlib import Path

# Add the backend directory to the Python path
backend_dir = Path(__file__).parent
sys.path.insert(0, str(backend_dir))

def test_imports():
    """Test if all modules can be imported successfully."""
    print("Testing imports...")
    
    try:
        # Test core imports
        from fastapi import FastAPI
        print("‚úì FastAPI imported successfully")
        
        # Test if our modules can be imported
        from api.schemas.auth import LoginRequest, UserResponse
        print("‚úì Auth schemas imported successfully")
        
        from api.schemas.olt import OLTBase, OLTResponse
        print("‚úì OLT schemas imported successfully")
        
        from api.schemas.ont import ONTBase, ONTResponse
        print("‚úì ONT schemas imported successfully")
        
        from api.schemas.monitoring import AlarmBase, PerformanceDataBase
        print("‚úì Monitoring schemas imported successfully")
        
        print("\n‚úÖ All schema imports successful!")
        return True
        
    except ImportError as e:
        print(f"‚ùå Import error: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        return False

def test_schema_validation():
    """Test basic schema validation."""
    print("\nTesting schema validation...")
    
    try:
        from api.schemas.auth import LoginRequest, UserResponse
        from api.schemas.olt import OLTCreate, OLTResponse
        from datetime import datetime
        
        # Test LoginRequest validation
        login_data = LoginRequest(username="testuser", password="testpass123")
        print(f"‚úì LoginRequest validation: {login_data.username}")
        
        # Test OLTCreate validation
        olt_data = OLTCreate(
            name="Test OLT",
            ip_address="192.168.1.100",
            snmp_community="public",
            location="Test Location"
        )
        print(f"‚úì OLTCreate validation: {olt_data.name}")
        
        print("\n‚úÖ Schema validation tests passed!")
        return True
        
    except Exception as e:
        print(f"‚ùå Schema validation error: {e}")
        return False

def test_api_structure():
    """Test API router structure."""
    print("\nTesting API structure...")
    
    try:
        from api.auth import router as auth_router
        from api.olt import router as olt_router
        from api.ont import router as ont_router
        from api.monitoring import router as monitoring_router
        from api.users import router as users_router
        from api.websocket import router as websocket_router
        
        print(f"‚úì Auth router: {len(auth_router.routes)} routes")
        print(f"‚úì OLT router: {len(olt_router.routes)} routes")
        print(f"‚úì ONT router: {len(ont_router.routes)} routes")
        print(f"‚úì Monitoring router: {len(monitoring_router.routes)} routes")
        print(f"‚úì Users router: {len(users_router.routes)} routes")
        print(f"‚úì WebSocket router: {len(websocket_router.routes)} routes")
        
        print("\n‚úÖ API structure tests passed!")
        return True
        
    except Exception as e:
        print(f"‚ùå API structure error: {e}")
        return False

def main():
    """Run all tests."""
    print("üöÄ Starting OLT Manager Application Tests")
    print("=" * 50)
    
    tests = [
        test_imports,
        test_schema_validation,
        test_api_structure
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"‚ùå Test failed with exception: {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä Test Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ All tests passed! The application structure is correct.")
        return True
    else:
        print("‚ö†Ô∏è  Some tests failed. Please check the errors above.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)